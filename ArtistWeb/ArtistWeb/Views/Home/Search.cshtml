@{
    ViewBag.Title = "Search";
}

<div ng-controller="SearchController">
    <h2>Search</h2>

    <form class="form-inline" ng-submit="search()">
        <div class="form-group">
            <label class="control-label">Artist Name</label>
            <input type="text" ng-model="form.search" class="form-control" placeholder="Search..." />
        </div>
        <button type="submit" class="btn btn-primary">Search</button>
    </form>

    <div class="row">
        <div class="col-md-6">
            <h3>Search Results</h3>
            <i>click item to shortlist it</i>
            <div class="list-group">
                <a href="#" class="list-group-item" ng-repeat="result in searchResults" ng-click="addShortList(result)">
                    {{ result.name }}                    
                </a>
            </div>
        </div>
        <div class="col-md-6">
            <h3>Shortlist</h3>
            <i>click item to favourite it</i>
            <div class="list-group">
                <a href="#" class="list-group-item" ng-repeat="item in shortlist" ng-click="addFavouriteArtist(item)">
                    {{ item.name }}
                    <i class="fa fa-star pull-right" style="color:#FFC107" ng-show="item.isFavourite"></i>
                </a>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script type="text/javascript">
        var app = angular.module("ArtistWeb", []);

        app.controller(
            "SearchController",
            function ($scope, searchService, favouriteService) {
                $scope.searchResults = [];
                $scope.shortlist = [];
                $scope.favouriteAritsts = favouriteService.getFavouriteArtists();

                $scope.form = {
                    search: ""
                };

                $scope.search = function () {
                    searchService.searchArtist($scope.form.search)
                        .then(function (dataResponse) {
                            var data = dataResponse.data;
                            var results = data.results.artistmatches.artist;

                            applyResults(results);
                        })
                };

                $scope.addShortList = function (result) {
                    var found = false;
                    for (var i = 0; i < $scope.shortlist.length; i++) {
                        if ($scope.shortlist[i].mbid == result.mbid) {
                            found = true;
                            break;
                        }
                    }

                    if (!found) {
                        var shortlistArtist = {
                            name: result.name,
                            mbid: result.mbid,
                            isFavourite: favouriteService.containsArtist(result.mbid)
                        };

                        $scope.shortlist.push(shortlistArtist);
                    }
                };

                $scope.addFavouriteArtist = function (item) {
                    favouriteService.addFavouriteArtist({ name: item.name, mbid: item.mbid });

                    item.isFavourite = true;
                };

                function applyResults(results) {
                    $scope.searchResults = results;
                };
            });

        app.service(
            "searchService",
            function ($http, $q) {

                return ({
                    searchArtist: searchArtist
                });

                function searchArtist(search) {
                    return $http({
                        method: "GET",
                        url: "http://ws.audioscrobbler.com/2.0",
                        params: {
                            method: "artist.search",
                            api_key: "c72af4060e3f48c9e1ccb675c8fbd97a",
                            format: "json",
                            artist: search
                        }
                    });
                }
            });

        app.service(
            "favouriteService",
            function () {

                return ({
                    getFavouriteArtists: getFavouriteArtists,
                    saveFavouriteArtists: saveFavouriteArtists,
                    addFavouriteArtist: addFavouriteArtist,
                    containsArtist: containsArtist
                });

                function getFavouriteArtists() {
                    var favouriteAritsts = JSON.parse(localStorage.getItem("favouriteAritsts"));

                    if (favouriteAritsts === null) {
                        favouriteAritsts = [];

                        saveFavouriteArtists(favouriteAritsts);
                    }

                    return favouriteAritsts;
                }

                function saveFavouriteArtists(favouriteAritsts) {
                    localStorage.setItem("favouriteAritsts", JSON.stringify(favouriteAritsts));
                }

                function addFavouriteArtist(artist) {
                    var favouriteAritsts = getFavouriteArtists();
                    
                    if (!containsArtist(artist.mbid)) {
                        favouriteAritsts.push(artist);
                    }

                    saveFavouriteArtists(favouriteAritsts);
                }

                function containsArtist(mbid) {
                    var favouriteAritsts = getFavouriteArtists();
                    var found = false;

                    for (var i = 0; i < favouriteAritsts.length; i++) {
                        if (favouriteAritsts[i].mbid == mbid) {
                            found = true;
                            break;
                        }
                    }

                    return found;
                }
            });
    </script>
}